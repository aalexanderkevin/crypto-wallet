// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	model "github.com/aalexanderkevin/crypto-wallet/model"

	rpc "github.com/ethereum/go-ethereum/rpc"

	types "github.com/ethereum/go-ethereum/core/types"
)

// Ethereum is an autogenerated mock type for the Ethereum type
type Ethereum struct {
	mock.Mock
}

// CheckAddress provides a mock function with given fields: address
func (_m *Ethereum) CheckAddress(address string) error {
	ret := _m.Called(address)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Ethereum) Close() {
	_m.Called()
}

// GetBalance provides a mock function with given fields: ctx, fromAddress
func (_m *Ethereum) GetBalance(ctx context.Context, fromAddress common.Address) (*big.Int, error) {
	ret := _m.Called(ctx, fromAddress)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address) (*big.Int, error)); ok {
		return rf(ctx, fromAddress)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Address) *big.Int); ok {
		r0 = rf(ctx, fromAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Address) error); ok {
		r1 = rf(ctx, fromAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockInformation provides a mock function with given fields: ctx, txHash
func (_m *Ethereum) GetBlockInformation(ctx context.Context, txHash *common.Hash) (*model.Transaction, error) {
	ret := _m.Called(ctx, txHash)

	var r0 *model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *common.Hash) (*model.Transaction, error)); ok {
		return rf(ctx, txHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *common.Hash) *model.Transaction); ok {
		r0 = rf(ctx, txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *common.Hash) error); ok {
		r1 = rf(ctx, txHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentBlock provides a mock function with given fields: ctx
func (_m *Ethereum) GetCurrentBlock(ctx context.Context) (*int64, error) {
	ret := _m.Called(ctx)

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *int64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionPending provides a mock function with given fields: ctx, txHash
func (_m *Ethereum) GetTransactionPending(ctx context.Context, txHash *common.Hash) (*model.Transaction, *bool, error) {
	ret := _m.Called(ctx, txHash)

	var r0 *model.Transaction
	var r1 *bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *common.Hash) (*model.Transaction, *bool, error)); ok {
		return rf(ctx, txHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *common.Hash) *model.Transaction); ok {
		r0 = rf(ctx, txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *common.Hash) *bool); ok {
		r1 = rf(ctx, txHash)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*bool)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *common.Hash) error); ok {
		r2 = rf(ctx, txHash)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTx provides a mock function with given fields: ctx, txHash
func (_m *Ethereum) GetTx(ctx context.Context, txHash *common.Hash) (*model.Transaction, error) {
	ret := _m.Called(ctx, txHash)

	var r0 *model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *common.Hash) (*model.Transaction, error)); ok {
		return rf(ctx, txHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *common.Hash) *model.Transaction); ok {
		r0 = rf(ctx, txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *common.Hash) error); ok {
		r1 = rf(ctx, txHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWallet provides a mock function with given fields: ctx, seedPhrase
func (_m *Ethereum) GetWallet(ctx context.Context, seedPhrase *string) (*model.EthHdWallet, error) {
	ret := _m.Called(ctx, seedPhrase)

	var r0 *model.EthHdWallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) (*model.EthHdWallet, error)); ok {
		return rf(ctx, seedPhrase)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) *model.EthHdWallet); ok {
		r0 = rf(ctx, seedPhrase)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EthHdWallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, seedPhrase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTx provides a mock function with given fields: ctx, txOpts, wallet
func (_m *Ethereum) SendTx(ctx context.Context, txOpts *model.TxOpts, wallet *model.EthHdWallet) (*types.Transaction, error) {
	ret := _m.Called(ctx, txOpts, wallet)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.TxOpts, *model.EthHdWallet) (*types.Transaction, error)); ok {
		return rf(ctx, txOpts, wallet)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.TxOpts, *model.EthHdWallet) *types.Transaction); ok {
		r0 = rf(ctx, txOpts, wallet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.TxOpts, *model.EthHdWallet) error); ok {
		r1 = rf(ctx, txOpts, wallet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribePendingTransactions provides a mock function with given fields: ctx
func (_m *Ethereum) SubscribePendingTransactions(ctx context.Context) (*rpc.ClientSubscription, chan *types.Transaction, error) {
	ret := _m.Called(ctx)

	var r0 *rpc.ClientSubscription
	var r1 chan *types.Transaction
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (*rpc.ClientSubscription, chan *types.Transaction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *rpc.ClientSubscription); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.ClientSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) chan *types.Transaction); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan *types.Transaction)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewEthereum creates a new instance of Ethereum. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEthereum(t interface {
	mock.TestingT
	Cleanup(func())
}) *Ethereum {
	mock := &Ethereum{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
