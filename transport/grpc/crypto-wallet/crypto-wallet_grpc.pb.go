// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: transport/grpc/crypto-wallet/crypto-wallet.proto

package crypto_wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CryptoWallet_CreateWallet_FullMethodName   = "/crypto_wallet.CryptoWallet/CreateWallet"
	CryptoWallet_SendToken_FullMethodName      = "/crypto_wallet.CryptoWallet/SendToken"
	CryptoWallet_TriggerWatcher_FullMethodName = "/crypto_wallet.CryptoWallet/TriggerWatcher"
)

// CryptoWalletClient is the client API for CryptoWallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptoWalletClient interface {
	CreateWallet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreteWalletResponse, error)
	SendToken(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	TriggerWatcher(ctx context.Context, in *TriggerWatcherRequest, opts ...grpc.CallOption) (*TriggerWatcherResponse, error)
}

type cryptoWalletClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoWalletClient(cc grpc.ClientConnInterface) CryptoWalletClient {
	return &cryptoWalletClient{cc}
}

func (c *cryptoWalletClient) CreateWallet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreteWalletResponse, error) {
	out := new(CreteWalletResponse)
	err := c.cc.Invoke(ctx, CryptoWallet_CreateWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoWalletClient) SendToken(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, CryptoWallet_SendToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoWalletClient) TriggerWatcher(ctx context.Context, in *TriggerWatcherRequest, opts ...grpc.CallOption) (*TriggerWatcherResponse, error) {
	out := new(TriggerWatcherResponse)
	err := c.cc.Invoke(ctx, CryptoWallet_TriggerWatcher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoWalletServer is the server API for CryptoWallet service.
// All implementations must embed UnimplementedCryptoWalletServer
// for forward compatibility
type CryptoWalletServer interface {
	CreateWallet(context.Context, *emptypb.Empty) (*CreteWalletResponse, error)
	SendToken(context.Context, *SendRequest) (*SendResponse, error)
	TriggerWatcher(context.Context, *TriggerWatcherRequest) (*TriggerWatcherResponse, error)
	mustEmbedUnimplementedCryptoWalletServer()
}

// UnimplementedCryptoWalletServer must be embedded to have forward compatible implementations.
type UnimplementedCryptoWalletServer struct {
}

func (UnimplementedCryptoWalletServer) CreateWallet(context.Context, *emptypb.Empty) (*CreteWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedCryptoWalletServer) SendToken(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToken not implemented")
}
func (UnimplementedCryptoWalletServer) TriggerWatcher(context.Context, *TriggerWatcherRequest) (*TriggerWatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerWatcher not implemented")
}
func (UnimplementedCryptoWalletServer) mustEmbedUnimplementedCryptoWalletServer() {}

// UnsafeCryptoWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoWalletServer will
// result in compilation errors.
type UnsafeCryptoWalletServer interface {
	mustEmbedUnimplementedCryptoWalletServer()
}

func RegisterCryptoWalletServer(s grpc.ServiceRegistrar, srv CryptoWalletServer) {
	s.RegisterService(&CryptoWallet_ServiceDesc, srv)
}

func _CryptoWallet_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoWalletServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoWallet_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoWalletServer).CreateWallet(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoWallet_SendToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoWalletServer).SendToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoWallet_SendToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoWalletServer).SendToken(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoWallet_TriggerWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerWatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoWalletServer).TriggerWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoWallet_TriggerWatcher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoWalletServer).TriggerWatcher(ctx, req.(*TriggerWatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CryptoWallet_ServiceDesc is the grpc.ServiceDesc for CryptoWallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptoWallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crypto_wallet.CryptoWallet",
	HandlerType: (*CryptoWalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _CryptoWallet_CreateWallet_Handler,
		},
		{
			MethodName: "SendToken",
			Handler:    _CryptoWallet_SendToken_Handler,
		},
		{
			MethodName: "TriggerWatcher",
			Handler:    _CryptoWallet_TriggerWatcher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/crypto-wallet/crypto-wallet.proto",
}
